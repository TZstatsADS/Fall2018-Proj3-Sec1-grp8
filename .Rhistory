if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(depth=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
save(fit_train, file="../output/fit_train.RData")
tm_test=NA
if(run.test){
load(file=paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file="../output/fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file="../output/pred_test.RData")
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for making prediction=", tm_test[1], "s \n")
getwd()
setwd("../")
setwd("../")
getwd()
setwd("./ads_fall2018_proj3")
setwd("./Fall2018-Proj3-Sec1-grp8")
setwd("Fall2018-Proj3-Sec1-grp8")
getwd()
setwd("Fall2018-Proj3-Sec1-grp8/")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
#save(dat_train, file="./output/feature_train.RData")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(feat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
debug("cv.function")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
#save(dat_train, file="./output/feature_train.RData")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(feat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
LR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR"
HR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR"
library("EBImage")
n_files <- length(list.files(LR_dir))
LR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR"
HR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR"
library("EBImage")
n_files <- length(list.files(LR_dir))
n_points=1000
featMat <- array(NA, c(n_files * n_points, 8, 3))
labMat <- array(NA, c(n_files * n_points, 4, 3))
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", i), ".jpg"))
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
n_files
sprintf("%04d", 1)
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
LR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR/"
HR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR/"
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
imgLR
imgLR$dim
str(imgLR)
length(imgLR@.Data)
sample(1:length(imgLR@.Data), n_points)
imgLR@.Data[sample(1:length(imgLR@.Data), n_points)]
s <- imgLR@.Data[sample(1:length(imgLR@.Data), n_points)]
s <- sample(1:length(imgLR@.Data), n_points)
str(imgLR@.Data)
dim(imgLR@.Data)
prod(dim(imgLR@.Data)/3)
dim(imgLR@.Data)
dim(imgLR@.Data)[1] * dim(imgLR@.Data)[2]
s <- sample(dim(imgLR@.Data)[1] * dim(imgLR@.Data)[2], n_points)
str(featMat)
featMat[1,]
featMat[1,,]
imgLR
s <- sample(1:width, n_points, replace = T)
width <- dim(imgLR@.Data)[1]
height <- dim(imgLR@.Data)[2]
s <- sample(1:width, n_points, replace = T)
s
s <- matrix(x = rep(NA, n_points))
s <- matrix(rep(NA, n_points))
s <- matrix(rep(NA, n_points * 2), ncol  = 2)
s
colnames(s) <- c("x", "y")
s
s$x <- sample(1:width, n_points, replace = T)
s$y <- sample(1:height, n_points, replace = T)
width <- dim(imgLR@.Data)[1]
height <- dim(imgLR@.Data)[2]
s <- matrix(rep(NA, n_points * 2), ncol  = 2)
colnames(s) <- c("x", "y")
s$x <- sample(1:width, n_points, replace = T)
s$x
s$y <- sample(1:height, n_points, replace = T)
p <- 1
imgLR@.Data[(s$x[p] - 1):(s$x[p] + 1),
(s$y[p] - 1):(s$y[p] + 1), ]
featMat[1,,]
c(imgLR@.Data[(s$x[p] - 1):(s$x[p] + 1),
(s$y[p] - 1):(s$y[p] + 1), ])
c(imgLR@.Data[(s$x[p] - 1):(s$x[p] + 1),
(s$y[p] - 1):(s$y[p] + 1), ])[c(-5, -14, 23)]
c(imgLR@.Data[(s$x[p] - 1):(s$x[p] + 1),
(s$y[p] - 1):(s$y[p] + 1), ])[c(-5, -14, -23)]
featMat[1,,] <- c(imgLR@.Data[(s$x[p] - 1):(s$x[p] + 1),
(s$y[p] - 1):(s$y[p] + 1), ])[c(-5, -14, -23)]
featMat[1,,]
s$x
p <- 988
c(imgLR@.Data[(s$x[p] - 1):(s$x[p] + 1),
(s$y[p] - 1):(s$y[p] + 1), ])[c(-5, -14, -23)]
s$x
s$y
s$y[857]
p <- 857
c(imgLR@.Data[(s$x[p] - 1):(s$x[p] + 1),
(s$y[p] - 1):(s$y[p] + 1), ])[c(-5, -14, -23)]
imgLR@.Data[(s$x[p] - 1):(s$x[p] + 1),
(s$y[p] - 1):(s$y[p] + 1), ]
square <- imgLR@.Data[(s$x[p] - 1):(s$x[p] + 1),
(s$y[p] - 1):(s$y[p] + 1), ]
str(square)
square
square[,,1]
dim(square)
dim(square) < 3
square
square[,2,]
square[,3,]
square[,3,] <- rep(0,9)
typeof(square)
class(square)
aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
featMat[1,,] <- c(square)[c(-5, -14, -23)] # no central pixel
square
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
square
featMat[1,,] <- c(square)[c(-5, -14, -23)] # no central pixel
featMat[1,,]
width <- dim(imgLR@.Data)[1]
height <- dim(imgLR@.Data)[2]
x <- sample(1:width, n_points, replace = T)
y <- sample(1:height, n_points, replace = T)
y
x
p <- 135
square <- imgLR@.Data[(x[p] - 1):(x[p] + 1),
(y[p] - 1):(y[p] + 1), ]
square
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
square
dim(square)
square <- imgLR@.Data[(x[p] - 1):(x[p] + 1),
(y[p] - 1):(y[p] + 1), ]
square
aperm(apply(square, c(1, 3), c, 0), c(1, 2, 3))
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
aperm(square, c(2,1,3))
square <- imgLR@.Data[(x[p] - 1):(x[p] + 1),
(y[p] - 1):(y[p] + 1), ]
square <- imgLR@.Data[(x[p] - 1):(x[p] + 1),
(y[p] - 1):(y[p] + 1), ]
aperm(square, c(2,1,3))
square
apply(square, c(1, 3), c, 0)
apply(square, c(1, 2), c, 0)
apply(square, 1, c, 0)
apply(square, c(2, 3), c, 0)
square
x[1]
y[1]
x[1] <- 1
y[1] <- 1
p <- 1
square <- imgLR@.Data[(x[p] - 1):(x[p] + 1),
(y[p] - 1):(y[p] + 1), ]
square
square <- apply(square, c(2, 3), c, 0)
square
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
square
x[1] <- width
y[1] <- height
p <- 1
square <- imgLR@.Data[(x[p] - 1):(x[p] + 1),
(y[p] - 1):(y[p] + 1), ]
square
imgLR@.Data[width,height,]
imgLR@.Data[width + 1,height,]
imgLR@.Data[0,height,]
(x[p] + 1)
y[1] <- height
width
3 %*% 2
3 %% 2
6 %% 2
5 %% 2
5 %% 6
5 %% 5
5 %% 6
width
(x[p] + 1) %% width + 1
(x[p] + 1) %% (width + 1)
square <- imgLR@.Data[(x[p] - 1):max(c((x[p] + 1) %% (width + 1), width)),
(y[p] - 1):max(c((y[p] + 1) %% (height + 1), height)), ]
square
max(c((x[p] + 1) %% (width + 1), width))
width
max(c((y[p] + 1) %% (height + 1), height))
height
y[p]
with(square, if(dim(square)[1] < 3) print(0))
with(square, if(dim()[1] < 3) print(0))
dim(square)[1]
square
if(dim(square)[1] < 3){
square <- apply(square, c(2, 3), c, 0)
}
if(dim(square)[2] < 3){
# https://stackoverflow.com/questions/27637393/adding-column-or-row-in-3d-array
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
}
square
imgHR
imgHR <- readImage(paste0(HR_dir,  "img_", sprintf("%04d", i), ".jpg"))
imgHR <- readImage(paste0(HR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
imgHR
imgLR
LR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/LR/"
HR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR/"
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
imgHR <- readImage(paste0(HR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
imgLR
imgHR
str(labMat)
labMat[1,,]
square <- imgHR@.Data[(x[p] * 2 - 1):(x[p] * 2),
(x[p] * 2 - 1):(x[p] * 2), ]
p
x[p]
LR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/LR/"
HR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR/"
library("EBImage")
n_files <- length(list.files(LR_dir))
featMat <- array(NA, c(n_files * n_points, 8, 3))
labMat <- array(NA, c(n_files * n_points, 4, 3))
for(i in 1:n_files){
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", i), ".jpg"))
imgHR <- readImage(paste0(HR_dir,  "img_", sprintf("%04d", i), ".jpg"))
### step 1. sample n_points from imgLR
width <- dim(imgLR@.Data)[1]
height <- dim(imgLR@.Data)[2]
x <- sample(1:width, n_points, replace = T)
y <- sample(1:height, n_points, replace = T)
### step 2. for each sampled point in imgLR,
for(p in 1:n_points){
### step 2.1. save (the neighbor 8 pixels - central pixel) in featMat
###           tips: padding zeros for boundary points
# define square (don't allow for out of bound subscripts)
square <- imgLR@.Data[(x[p] - 1):max(c((x[p] + 1) %% (width + 1), width)),
(y[p] - 1):max(c((y[p] + 1) %% (height + 1), height)), ]
# padding zeros for boundary points
if(dim(square)[1] < 3){
square <- apply(square, c(2, 3), c, 0)
}
if(dim(square)[2] < 3){
# https://stackoverflow.com/questions/27637393/adding-column-or-row-in-3d-array
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
}
featMat[p,,] <- c(square)[c(-5, -14, -23)] # no central pixel
### step 2.2. save the corresponding 4 sub-pixels of imgHR in labMat
square <- imgHR@.Data[(x[p] * 2 - 1):(x[p] * 2),
(x[p] * 2 - 1):(x[p] * 2), ]
labMat[p,,] <- c(square)
}
}
x
y
imgLR
p <- 1
square <- imgLR@.Data[(x[p] - 1):max(c((x[p] + 1) %% (width + 1), width)),
(y[p] - 1):max(c((y[p] + 1) %% (height + 1), height)), ]
square
max(c((x[p] + 1) %% (width + 1), width))
(x[p] - 1)
(x[p] + 1)
(x[p] + 1) %% (width + 1)
(x[p] + 1) %% (width + 1)
width
width
(x[p] + 1)
((x[p] + 1) <= width)
((x[p] + 1) <= width) * (x[p] + 1)
((x[p] + 1) > width) * width
square <- imgLR@.Data[
(x[p] - 1):
((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1),
(y[p] - 1):
((y[p] + 1) > height) * height + ((y[p] + 1) <= height) * (y[p] + 1), ]
((y[p] + 1) > height) * height + ((y[p] + 1) <= height) * (y[p] + 1)
((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1)
imgLR
(x[p] - 1)
(y[p] - 1)
square <- imgLR@.Data[
(x[p] - 1):
((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1),
(y[p] - 1):
((y[p] + 1) > height) * height + ((y[p] + 1) <= height) * (y[p] + 1), ]
imgLR@.Data
(x[p] - 1):
((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1)
(x[p] - 1)
((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1)
(x[p] - 1):((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1)
((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1)
66:68
((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1)
typeof(((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1))
as.integer(((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1))
(x[p] - 1):as.integer(((x[p] + 1) > width) * width + ((x[p] + 1) <= width) * (x[p] + 1))
square <- imgLR@.Data[
(x[p] - 1):as.integer(((x[p] + 1) > width) * width
+ ((x[p] + 1) <= width) * (x[p] + 1)),
(y[p] - 1):as.integer(((y[p] + 1) > height) * height
+ ((y[p] + 1) <= height) * (y[p] + 1)), ]
square
(y[p] - 1):as.integer(((y[p] + 1) > height) * height
+ ((y[p] + 1) <= height) * (y[p] + 1))
width
for(p in 1:n_points){
### step 2.1. save (the neighbor 8 pixels - central pixel) in featMat
###           tips: padding zeros for boundary points
# define square (don't allow for out of bound subscripts)
square <- imgLR@.Data[
(x[p] - 1):as.integer(((x[p] + 1) > width) * width
+ ((x[p] + 1) <= width) * (x[p] + 1)),
(y[p] - 1):as.integer(((y[p] + 1) > height) * height
+ ((y[p] + 1) <= height) * (y[p] + 1)), ]
# padding zeros for boundary points
if(dim(square)[1] < 3){
square <- apply(square, c(2, 3), c, 0)
}
if(dim(square)[2] < 3){
# https://stackoverflow.com/questions/27637393/adding-column-or-row-in-3d-array
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
}
featMat[p,,] <- c(square)[c(-5, -14, -23)] # no central pixel
### step 2.2. save the corresponding 4 sub-pixels of imgHR in labMat
square <- imgHR@.Data[(x[p] * 2 - 1):(x[p] * 2),
(x[p] * 2 - 1):(x[p] * 2), ]
labMat[p,,] <- c(square)
}
(x[p] * 2 - 1):(x[p] * 2)
square <- imgHR@.Data[(x[p] * 2 - 1):(x[p] * 2),
(y[p] * 2 - 1):(y[p] * 2), ]
for(p in 1:n_points){
### step 2.1. save (the neighbor 8 pixels - central pixel) in featMat
###           tips: padding zeros for boundary points
# define square (don't allow for out of bound subscripts)
square <- imgLR@.Data[
(x[p] - 1):as.integer(((x[p] + 1) > width) * width
+ ((x[p] + 1) <= width) * (x[p] + 1)),
(y[p] - 1):as.integer(((y[p] + 1) > height) * height
+ ((y[p] + 1) <= height) * (y[p] + 1)), ]
# padding zeros for boundary points
if(dim(square)[1] < 3){
square <- apply(square, c(2, 3), c, 0)
}
if(dim(square)[2] < 3){
# https://stackoverflow.com/questions/27637393/adding-column-or-row-in-3d-array
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
}
featMat[p,,] <- c(square)[c(-5, -14, -23)] # no central pixel
### step 2.2. save the corresponding 4 sub-pixels of imgHR in labMat
square <- imgHR@.Data[(x[p] * 2 - 1):(x[p] * 2),
(y[p] * 2 - 1):(y[p] * 2), ]
labMat[p,,] <- c(square)
}
str(labMat)
head(labMat)
labMat[1,,]
labMat[2,,]
labMat[4,,]
labMat[100000,,]
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_setSmall/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
