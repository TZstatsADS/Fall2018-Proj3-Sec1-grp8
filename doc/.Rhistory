source("../lib/test.R")
#install.packages("neuralnet")
run.nnt=T
train_nn = function(feat_train, label_train){
library("neuralnet")
begin = Sys.time()
for (i in 1:12){
n <- names(dat_train)
model <- neuralnet(label_train~feat_train,hidden=1,
linear.output = T)
}
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(feat_train, label_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
cbind(feat_train,label_train)
feat_train
cbind(feat_train,label_train)
cbind(feat_train,label_train)$feat_train
cbind(feat_train,label_train)
feat_train
feat_train[,1]
feat_train
feat_train[,1,1]
feat_train
feat_train[,1,1]
names(dat_train)
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
for (i in 1:12){
n <- names(dat_train)
f <- as.formula(paste("dat_train$label ~", paste(n[!n %in% "dat_train$feature"], collapse = " + ")))
model <- neuralnet(f~,hidden=1,linear.output = T)
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
for (i in 1:12){
n <- names(dat_train)
f <- as.formula(paste("dat_train$label ~", paste(n[!n %in% "dat_train$feature"], collapse = " + ")))
model <- neuralnet(f,hidden=1,linear.output = T)
}
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(feat_train, label_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
for (i in 1:12){
n <- names(dat_train)
f <- as.formula(paste("dat_train$label ~", paste(n[!n %in% "dat_train$feature"], collapse = " + ")))
model <- neuralnet(f,hidden=1,linear.output = T)
}
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
for (i in 1:12){
n <- names(dat_train)
f <- as.formula(paste("dat_train$label ~", paste(n[!n %in% "dat_train$feature"], collapse = " + ")))
model <- neuralnet(f,data=dat_train,hidden=1,linear.output = T)
}
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
dat_train
names(dat_train)
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
for (i in 1:12){
n <- names(dat_train)
f <- as.formula(paste("dat_train$label ~", paste(n[!n %in% "dat_train$feature"], collapse = " + ")))
model <- neuralnet(f,data=dat_train,hidden=1,linear.output = T)
}
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
dat_train$label
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
for (i in 1:12){
n <- names(dat_train)
f <- as.formula(paste("dat_train$label ~", paste(n[!n %in% "dat_train$feature"], collapse = " + ")))
model <- neuralnet(f,data=dat_train,hidden=1,linear.output = T)
}
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train[1:1000000,,])
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
for (i in 1:12){
n <- names(dat_train)
f <- as.formula(paste("dat_train$label ~", paste(n[!n %in% "dat_train$label"], collapse = " + ")))
model <- neuralnet(f,data=dat_train,hidden=1,linear.output = T)
}
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
for (i in 1:12){
n <- names(dat_train)
model <- neuralnet(dat_train$label~dat_train$feature,data=dat_train,hidden=1,linear.output = T)
}
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
for (i in 1:12){
n <- names(dat_train)
c1 <- (i-1) %% 4 + 1
c2 <- (i-c1) %/% 4 + 1
model <- neuralnet(dat_train$label[, c1, c2]~dat_train$feature[, , c2],data=dat_train,hidden=1,linear.output = T)
}
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
#for (i in 1:12){
#  n <- names(dat_train)
#  c1 <- (i-1) %% 4 + 1
#  c2 <- (i-c1) %/% 4 + 1
#  model <- neuralnet(dat_train$label[, c1, c2]~dat_train$feature[, , c2],data=dat_train,hidden=1,linear.output = T)
#}
model <- neuralnet(dat_train$label[, 1, 1]~dat_train$feature[, , 1],data=dat_train,hidden=1,linear.output = T)
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
dat_train$label[, 1, 1]
dim(dat_train$label[, 1, 1])
len(dat_train$label[, 1, 1])
dat_train$label[, 1, 1]
len(dat_train$label[1, 1, 1])
dat_train$label[1, 1, 1]
dat_train$label[, 1, 1]
source("../lib/feature.R")
#
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
#   feat_train <- dat_train$feature
#   label_train <- dat_train$label
# }
# save(dat_train, file="../output/feature_train.RData")
load(file="../output/feature_train.RData")
feat_train <- dat_train$feature
label_train <- dat_train$label
source("../lib/train.R")
source("../lib/test.R")
(dat_train$label[1, 1, 1]
dat_train$feature[1, 1, 1]
dat_train$feature[1, 1, 1]
dat_train$feature[, 1, 1]
dat_train$feature[1, , 1]
dat_train$label[1, , 1]
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
#for (i in 1:12){
#  n <- names(dat_train)
#  c1 <- (i-1) %% 4 + 1
#  c2 <- (i-c1) %/% 4 + 1
#  model <- neuralnet(dat_train$label[, c1, c2]~dat_train$feature[, , c2],data=dat_train,hidden=1,linear.output = T)
#}
model <- neuralnet(dat_train$feature[1, , 1]~dat_train$label[1, , 1],data=dat_train,hidden=1,linear.output = T)
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
#for (i in 1:12){
#  n <- names(dat_train)
#  c1 <- (i-1) %% 4 + 1
#  c2 <- (i-c1) %/% 4 + 1
#  model <- neuralnet(dat_train$label[, c1, c2]~dat_train$feature[, , c2],data=dat_train,hidden=1,linear.output = T)
#}
model <- neuralnet(dat_train$label[1, , 1]~dat_train$feature[1, , 1],data=dat_train,hidden=1,linear.output = T)
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
#for (i in 1:12){
#  n <- names(dat_train)
#  c1 <- (i-1) %% 4 + 1
#  c2 <- (i-c1) %/% 4 + 1
#  model <- neuralnet(dat_train$label[, c1, c2]~dat_train$feature[, , c2],data=dat_train,hidden=1,linear.output = T)
#}
model <- neuralnet(dat_train$label[1,,1]~dat_train$feature[1,,1],data=dat_train,hidden=1,linear.output = T)
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
dat_train$label[1,,1]
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
#for (i in 1:12){
#  n <- names(dat_train)
#  c1 <- (i-1) %% 4 + 1
#  c2 <- (i-c1) %/% 4 + 1
#  model <- neuralnet(dat_train$label[, c1, c2]~dat_train$feature[, , c2],data=dat_train,hidden=1,linear.output = T)
#}
model <- neuralnet(dat_train$label[1,,1]~dat_train$feature[1,,1],data=dat_train,hidden=1,linear.output = T)
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
#for (i in 1:12){
#  n <- names(dat_train)
#  c1 <- (i-1) %% 4 + 1
#  c2 <- (i-c1) %/% 4 + 1
#  model <- neuralnet(dat_train$label[, c1, c2]~dat_train$feature[, , c2],data=dat_train,hidden=1,linear.output = T)
#}
model <- neuralnet(label[1,,1]~feature[1,,1],data=dat_train,hidden=1,linear.output = T)
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
#for (i in 1:12){
#  n <- names(dat_train)
#  c1 <- (i-1) %% 4 + 1
#  c2 <- (i-c1) %/% 4 + 1
#  model <- neuralnet(dat_train$label[, c1, c2]~dat_train$feature[, , c2],data=dat_train,hidden=1,linear.output = T)
#}
model <- neuralnet(dat_train$label[1,,1]~dat_train$feature[1,,1],data=dat_train,hidden=1,linear.output = T)
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
rm(list=ls())
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
#for (i in 1:12){
#  n <- names(dat_train)
#  c1 <- (i-1) %% 4 + 1
#  c2 <- (i-c1) %/% 4 + 1
#  model <- neuralnet(dat_train$label[, c1, c2]~dat_train$feature[, , c2],data=dat_train,hidden=1,linear.output = T)
#}
model <- neuralnet(dat_train$label[1,,1]~dat_train$feature[1,,1],data=dat_train,hidden=1,linear.output = T)
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
#install.packages("gbm")
library("gbm")
set.seed(2018)
# setwd("Fall2018-Proj3-Sec1-grp8/")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
depths <- 2:3
trees <- c(10,20)
bags <- seq(0.3, 0.7, 0.1)
# all combinations
model_values <- expand.grid(depths = depths, trees = trees, bags = bags)
# model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
#
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
#   feat_train <- dat_train$feature
#   label_train <- dat_train$label
# }
# save(dat_train, file="../output/feature_train.RData")
load(file="../output/feature_train.RData")
feat_train <- dat_train$feature
label_train <- dat_train$label
dat_train
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
library("EBImage")
#install.packages("gbm")
library("gbm")
set.seed(2018)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
depths <- 2:3
trees <- c(10,20)
bags <- seq(0.3, 0.7, 0.1)
# all combinations
model_values <- expand.grid(depths = depths, trees = trees, bags = bags)
# model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
#
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
#   feat_train <- dat_train$feature
#   label_train <- dat_train$label
# }
# save(dat_train, file="../output/feature_train.RData")
load(file="../output/feature_train.RData")
feat_train <- dat_train$feature
label_train <- dat_train$label
dat_train
source("../lib/feature.R")
#
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
#   feat_train <- dat_train$feature
#   label_train <- dat_train$label
# }
# save(dat_train, file="../output/feature_train.RData")
load(file="../output/feature_train.RData")
feat_train <- dat_train$feature
label_train <- dat_train$label
source("../lib/feature.R")
#
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
#   feat_train <- dat_train$feature
#   label_train <- dat_train$label
# }
# save(dat_train, file="../output/feature_train.RData")
load(file="../output/feature_train.RData")
feat_train <- dat_train$feature
label_train <- dat_train$label
feat_train
source("../lib/train.R")
source("../lib/test.R")
#install.packages("neuralnet")
run.nnt=T
train_nn = function(dat_train){
library("neuralnet")
begin = Sys.time()
#for (i in 1:12){
#  n <- names(dat_train)
#  c1 <- (i-1) %% 4 + 1
#  c2 <- (i-c1) %/% 4 + 1
#  model <- neuralnet(dat_train$label[, c1, c2]~dat_train$feature[, , c2],data=dat_train,hidden=1,linear.output = T)
#}
model <- neuralnet(dat_train$label[1,,1]~dat_train$feature[1,,1],data=dat_train,hidden=1,linear.output = T)
end= Sys.time()
time = end - begin #Total Running Time
return(list(fit = model, time = time))
}
if(run.nnt){
nnt_train <- train_nn(dat_train)
cat("Time for testing neural network model=", nnt_train$time, "s \n")
}
