if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
dat_train
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
dat_train
LR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/LR/"
HR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR/"
library("EBImage")
n_points=1000
library("EBImage")
n_files <- length(list.files(LR_dir))
featMat <- array(NA, c(n_files * n_points, 8, 3))
labMat <- array(NA, c(n_files * n_points, 4, 3))
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
imgHR <- readImage(paste0(HR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
width <- dim(imgLR@.Data)[1]
height <- dim(imgLR@.Data)[2]
set.seed(100)
x <- sample(1:width, n_points, replace = T)
y <- sample(1:height, n_points, replace = T)
p <- 1
square <- imgLR@.Data[
(x[p] - 1):as.integer(((x[p] + 1) > width) * width
+ ((x[p] + 1) <= width) * (x[p] + 1)),
(y[p] - 1):as.integer(((y[p] + 1) > height) * height
+ ((y[p] + 1) <= height) * (y[p] + 1)), ]
if(dim(square)[1] < 3){
square <- apply(square, c(2, 3), c, 0)
}
if(dim(square)[2] < 3){
# https://stackoverflow.com/questions/27637393/adding-column-or-row-in-3d-array
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
}
vectorized <- c(square)
vectorized <- vectorized - (!vectorized == 0) * c(rep(vectorized[5], 9),
rep(vectorized[14], 9),
rep(vectorized[23], 9))
vectorized <- vectorized[c(-5, -14, -23)] # no central pixel
featMat[(i-1) * n_points + p,,] <- vectorized
i <- 1
featMat[(i-1) * n_points + p,,] <- vectorized
featMat
square <- imgHR@.Data[(x[p] * 2 - 1):(x[p] * 2),
(y[p] * 2 - 1):(y[p] * 2), ]
labMat[(i-1) * n_points + p,,] <- c(square)
labMat
i <- 2
i <- 1
p <- 2
square <- imgLR@.Data[
(x[p] - 1):as.integer(((x[p] + 1) > width) * width
+ ((x[p] + 1) <= width) * (x[p] + 1)),
(y[p] - 1):as.integer(((y[p] + 1) > height) * height
+ ((y[p] + 1) <= height) * (y[p] + 1)), ]
if(dim(square)[1] < 3){
square <- apply(square, c(2, 3), c, 0)
}
if(dim(square)[2] < 3){
# https://stackoverflow.com/questions/27637393/adding-column-or-row-in-3d-array
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
}
vectorized <- c(square)
vectorized <- vectorized - (!vectorized == 0) * c(rep(vectorized[5], 9),
rep(vectorized[14], 9),
rep(vectorized[23], 9))
vectorized <- vectorized[c(-5, -14, -23)] # no central pixel
featMat[(i-1) * n_points + p,,] <- vectorized
featMat
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
dat_train
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
dat_train
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
View(extra_label)
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
dat_train
n_files <- 1500
(2 * n_files/3 + 1)
n_files
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
(2 * n_files/3 + 1)
n_files
paste0(LR_dir,  "img_", sprintf("%04d", i), ".jpg")
sprintf("%04d", i)
i <- (2 * n_files/3 + 1)
sprintf("%04d", i)
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
head(dat_train)
LR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/LR/"
HR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR/"
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
imgHR <- readImage(paste0(HR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
width <- dim(imgLR@.Data)[1]
height <- dim(imgLR@.Data)[2]
set.seed(100)
x <- sample(1:width, n_points, replace = T)
y <- sample(1:height, n_points, replace = T)
n_points=1000
width <- dim(imgLR@.Data)[1]
height <- dim(imgLR@.Data)[2]
set.seed(100)
x <- sample(1:width, n_points, replace = T)
y <- sample(1:height, n_points, replace = T)
p <- 1
square <- imgLR@.Data[
(x[p] - 1):as.integer(((x[p] + 1) > width) * width
+ ((x[p] + 1) <= width) * (x[p] + 1)),
(y[p] - 1):as.integer(((y[p] + 1) > height) * height
+ ((y[p] + 1) <= height) * (y[p] + 1)), ]
if(dim(square)[1] < 3){
square <- apply(square, c(2, 3), c, 0)
}
if(dim(square)[2] < 3){
# https://stackoverflow.com/questions/27637393/adding-column-or-row-in-3d-array
square <- aperm(apply(square, c(1, 3), c, 0), c(2, 1, 3))
}
vectorized <- c(square)
vectorized <- vectorized - (!vectorized == 0) * c(rep(vectorized[5], 9),
rep(vectorized[14], 9),
rep(vectorized[23], 9))
vectorized <- vectorized[c(-5, -14, -23)] # no central pixel
vectorized
featMat[(i-1) * n_points + p,,]
featMat <- array(NA, c(n_files * n_points, 8, 3))
featMat[(i-1) * n_points + p,,]
vectorized
featMat[(i-1) * n_points + p,,]
matrix(vectorized, col = 3)
matrix(vectorized, ncol = 3)
featMat[(i-1) * n_points + p,,] <- matrix(vectorized, ncol = 3)
featMat[(i-1) * n_points + p,,]
square <- imgHR@.Data[(x[p] * 2 - 1):(x[p] * 2),
(y[p] * 2 - 1):(y[p] * 2), ]
labMat[(i-1) * n_points + p,,] <- c(square)
labMat <- array(NA, c(n_files * n_points, 4, 3))
labMat[(i-1) * n_points + p,,] <- c(square)
labMat[(i-1) * n_points + p,,]
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
table(is.na(dat_train))
dat_train
sum(is.na(dat_train))
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
sum(is.na(dat_train))
sum(is.na(dat_train))
dat_train
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
sum(is.na(feat_train))
source("../lib/feature.R")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- NA
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
sum(is.na(dat_train$feature))
sum(is.na(dat_train$label))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
complete.cases(dat_train$feature)
sum(complete.cases(dat_train$feature))
8*3*4*1000
LR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/LR/"
HR_dir <- "/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Proj3-Sec1-grp8/data/train_set/HR/"
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
sum(is.na(dat_train$feature))
sum(is.na(dat_train$label))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
sum(is.na(dat_train$feature))
sum(is.na(dat_train$label))
save(dat_train, file="./output/feature_train.RData")
getwd()
save(dat_train, file="../output/feature_train.RData")
